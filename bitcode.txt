Scratch VM uses a simple bitcode scheme
	[1 memory cell type] [n memory cells payload]

Payload format:
%a is the index to one of the address registers, generated by CAG

%i is a single cell, immediate value
%a is a single cell, auto-referencing, absolue pointer
%r is a single cell, auto-referencing, relative pointer to the program counter
%b is a single cell, abstract, absolute pointer
%s is a single cell, abstract, relative pointer to the program counter
%c is a complex address register pointer

Complex Address Generate (CAG):
CAG is used to compute an address based on some other VM value.
The resulting address is loaded into an address register to be used by some instructions.

TYPE	| OPCODE FORMAT	| BEHAVIOR
0-1		| CAG %b	| Loads address to address register
2-3		| CAG %s	|
4-5		| CAG %a	| Dereferences address, and loads resulting address to address register
6-7		| CAG %r	|
8		| PUSH %i	| Pushes value to stack, decrementing SP
9		| PUSH %c	|
10		| POP %c	| Pops a value from stack, incrementing SP
11		| LOAD %c, %i	| Loads value to memory
12		| LOAD %c, %c	| DMA.
13		| ADD %c, %c	| Loads value from former operand, performs arithmetic using latter operand, and stores value in former operand
14		| SUB %c, %c	|
15		| MUL %c, %c	|
16		| DIV %c, %c	|
17		| JMP %b	| Unconditional jump
18		| BRZ %b, %c	| Jump if value is zero
19		| BRS %b, %c	| Jump if value is less than zero
20		| HLT 			| Halt virtual machine
21		| CALL %b		| Pushes the PC to the stack and jumps to the function
22		| RET			| Jumps to the address at the top of the stack